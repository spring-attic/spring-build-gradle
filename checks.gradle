
/*
 * Copyright 2002-2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Issue a snapshot dependency report across all Java projects. Detects not
 * only direct snapshot dependencies, but transitive as well.
 *
 * @author Chris Beams
 * @see snapshotDependencyCheck
 */
task snapshotDependencyReport {
    description = 'Issues a snapshot dependency report across all Java projects'

    doFirst() {
        def snapshotDependencies = new HashMap<Project, List<Dependency>>()

        javaprojects.each { project ->
            project.sourceSets.main.compileClasspath.allDependencies.each { dep ->
                if (dep.version?.endsWith('SNAPSHOT')) {
                    if (snapshotDependencies[project] == null)
                        snapshotDependencies[project] = new ArrayList<Dependency>()
                    snapshotDependencies[project].add(dep)
                }
            }
        }

        project.hasSnapshotDependencies = snapshotDependencies.size() > 0

        if (project.hasSnapshotDependencies) {
            println "The following snapshot dependencies were found:"
            snapshotDependencies.each { entry ->
                println "${entry.key} depends on:"
                entry.value.each { dep ->
                    println "    ${dep}"
                }
            }
        }
    }
}


/**
 * Abort the build if any Java projects have snapshot dependencies. It important
 * that any non-snapshot release be checked for snapshot dependencies before
 * final publication, as snapshot dependencies may change and thus make the
 * release unstable and/or unreproducable.
 *
 * This task will be added to the build lifecycle automatically if the release
 * is non-snapshot.
 *
 * -PignoreSnapshotDependencies will bypass aborting the build.  A use case for
 * this option would be if a transitive dependency out of your control is a
 * snapshot release and you wish to proceed with releasing anyway.
 *
 * @author Chris Beams
 * @see snapshotDependencyReport
 */
task snapshotDependencyCheck(dependsOn: snapshotDependencyReport) {
    group = 'Verification'
    description = 'Aborts the build if any Java project has snapshot dependencies.'

    // bind to build lifecycle if we're a non-snapshot release
    if (version.releaseType != 'SNAPSHOT') {
        check.dependsOn snapshotDependencyCheck
    }

    onlyIf {
        project.hasSnapshotDependencies &&
            !project.hasProperty('ignoreSnapshotDependencies')
    }
    doFirst {
        throw new GradleException(
            "aborting '${name}' task due to snapshot dependencies. "
            + "supply -PignoreSnapshotDependencies to override")
    }
}
